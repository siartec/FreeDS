diff --git a/src/AsyncMqttClient/Packets/PublishPacket.cpp b/src/AsyncMqttClient/Packets/PublishPacket.cpp
index 2c5192f..ee3ce97 100644
--- a/src/AsyncMqttClient/Packets/PublishPacket.cpp
+++ b/src/AsyncMqttClient/Packets/PublishPacket.cpp
@@ -16,7 +16,8 @@ PublishPacket::PublishPacket(ParsingInformation* parsingInformation, OnMessageIn
 , _packetIdMsb(0)
 , _packetId(0)
 , _payloadLength(0)
-, _payloadBytesRead(0) {
+, _payloadBytesRead(0)
+, _ptempbuff(0) {
     _dup = _parsingInformation->packetFlags & HeaderFlag.PUBLISH_DUP;
     _retain = _parsingInformation->packetFlags & HeaderFlag.PUBLISH_RETAIN;
     char qosMasked = _parsingInformation->packetFlags & 0x06;
@@ -78,14 +79,36 @@ void PublishPacket::_preparePayloadHandling(uint32_t payloadLength) {
 
 void PublishPacket::parsePayload(char* data, size_t len, size_t* currentBytePosition) {
   size_t remainToRead = len - (*currentBytePosition);
-  if (_payloadBytesRead + remainToRead > _payloadLength) remainToRead = _payloadLength - _payloadBytesRead;
-
-  if (!_ignore) _dataCallback(_parsingInformation->topicBuffer, data + (*currentBytePosition), _qos, _dup, _retain, remainToRead, _payloadBytesRead, _payloadLength, _packetId);
+  if (_payloadBytesRead + remainToRead > _payloadLength)
+    remainToRead = _payloadLength - _payloadBytesRead;
+  if (!_ignore) {
+    if (remainToRead < _payloadLength) {
+      if (!_ptempbuff) {
+        _ptempbuff = new char[_payloadLength + 1];
+        if (_ptempbuff == nullptr) {
+          _ignore = true;
+          return;
+        }
+        memset(_ptempbuff, 0, _payloadLength + 1);
+        memcpy(&_ptempbuff[_payloadBytesRead], &data[(*currentBytePosition)], remainToRead);
+      } else {
+        memcpy(&_ptempbuff[_payloadBytesRead], &data[(*currentBytePosition)], remainToRead);
+        if ((_payloadBytesRead + remainToRead) == _payloadLength) {
+          _dataCallback(_parsingInformation->topicBuffer, _ptempbuff, _qos, _dup, _retain, _payloadLength, 0, _payloadLength, _packetId);
+          delete[] _ptempbuff;
+          _ptempbuff = NULL;
+        }
+      }
+    } else {
+      _dataCallback(_parsingInformation->topicBuffer, &data[(*currentBytePosition)], _qos, _dup, _retain, remainToRead, _payloadBytesRead, _payloadLength, _packetId);
+    }
+  }
   _payloadBytesRead += remainToRead;
   (*currentBytePosition) += remainToRead;
 
   if (_payloadBytesRead == _payloadLength) {
     _parsingInformation->bufferState = BufferState::NONE;
-    if (!_ignore) _completeCallback(_packetId, _qos);
+    if (!_ignore)
+      _completeCallback(_packetId, _qos);
   }
 }
diff --git a/src/AsyncMqttClient/Packets/PublishPacket.hpp b/src/AsyncMqttClient/Packets/PublishPacket.hpp
index d97205c..7d7cf92 100644
--- a/src/AsyncMqttClient/Packets/PublishPacket.hpp
+++ b/src/AsyncMqttClient/Packets/PublishPacket.hpp
@@ -34,5 +34,6 @@ class PublishPacket : public Packet {
   uint16_t _packetId;
   uint32_t _payloadLength;
   uint32_t _payloadBytesRead;
+  char*    _ptempbuff;
 };
 }  // namespace AsyncMqttClientInternals
 